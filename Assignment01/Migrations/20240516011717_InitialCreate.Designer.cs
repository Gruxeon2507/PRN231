// <auto-generated />
using System;
using Assignment01.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment01.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20240516011717_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment01.Models.Instructor", b =>
                {
                    b.Property<string>("TeacherCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TeacherCode");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("TeacherCode")
                        .HasName("PK_Instructor");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("Assignment01.Models.InstructorSubject", b =>
                {
                    b.Property<string>("TeacherCode")
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TeacherCode");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SubjectCode");

                    b.HasKey("TeacherCode", "SubjectCode")
                        .HasName("PK_InstructorSubject");

                    b.HasIndex("SubjectCode");

                    b.ToTable("InstructorSubject", (string)null);
                });

            modelBuilder.Entity("Assignment01.Models.Student", b =>
                {
                    b.Property<string>("StudentCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("StudentCode");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Course");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Gender");

                    b.Property<bool>("StillStudying")
                        .HasColumnType("bit")
                        .HasColumnName("StillStudying");

                    b.HasKey("StudentCode")
                        .HasName("PK_Student");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Assignment01.Models.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SubjectCode");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubjectName");

                    b.HasKey("SubjectCode")
                        .HasName("PK_Subject");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Assignment01.Models.Transcript", b =>
                {
                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("StudentCode");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SubjectCode");

                    b.Property<decimal>("HighestScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("HighestScore");

                    b.HasKey("StudentCode", "SubjectCode")
                        .HasName("PK_Transcript");

                    b.HasIndex("SubjectCode");

                    b.ToTable("Transcript", (string)null);
                });

            modelBuilder.Entity("Assignment01.Models.InstructorSubject", b =>
                {
                    b.HasOne("Assignment01.Models.Subject", "Subject")
                        .WithMany("InstructorSubjects")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InstructorSubject_Subject");

                    b.HasOne("Assignment01.Models.Instructor", "Instructor")
                        .WithMany("InstructorSubjects")
                        .HasForeignKey("TeacherCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InstructorSubject_Instructor");

                    b.Navigation("Instructor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Assignment01.Models.Transcript", b =>
                {
                    b.HasOne("Assignment01.Models.Student", "Student")
                        .WithMany("Transcripts")
                        .HasForeignKey("StudentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transcript_Student");

                    b.HasOne("Assignment01.Models.Subject", "Subject")
                        .WithMany("Transcripts")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transcript_Subject");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Assignment01.Models.Instructor", b =>
                {
                    b.Navigation("InstructorSubjects");
                });

            modelBuilder.Entity("Assignment01.Models.Student", b =>
                {
                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("Assignment01.Models.Subject", b =>
                {
                    b.Navigation("InstructorSubjects");

                    b.Navigation("Transcripts");
                });
#pragma warning restore 612, 618
        }
    }
}
